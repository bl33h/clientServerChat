/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: chat.proto */

#ifndef PROTOBUF_C_chat_2eproto__INCLUDED
#define PROTOBUF_C_chat_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Chat__UserRegistration Chat__UserRegistration;
typedef struct _Chat__UserInfo Chat__UserInfo;
typedef struct _Chat__UserRequest Chat__UserRequest;
typedef struct _Chat__ConnectedUsersResponse Chat__ConnectedUsersResponse;
typedef struct _Chat__ChangeStatus Chat__ChangeStatus;
typedef struct _Chat__MessageCommunication Chat__MessageCommunication;
typedef struct _Chat__ClientPetition Chat__ClientPetition;
typedef struct _Chat__ServerResponse Chat__ServerResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * REGISTRO DE USUARIOS NUEVOS
 */
struct  _Chat__UserRegistration
{
  ProtobufCMessage base;
  char *username;
  char *ip;
};
#define CHAT__USER_REGISTRATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_registration__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * INFORMACION DEL USUARIO BASE
 */
struct  _Chat__UserInfo
{
  ProtobufCMessage base;
  char *username;
  char *status;
  char *ip;
};
#define CHAT__USER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * SOLICITAR INFORMACION DE UN USUARIO O DE TODOS
 * user: (username || everyone)
 */
struct  _Chat__UserRequest
{
  ProtobufCMessage base;
  char *user;
};
#define CHAT__USER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__user_request__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * ENVIADO POR EL SERVIDOR
 */
struct  _Chat__ConnectedUsersResponse
{
  ProtobufCMessage base;
  size_t n_connectedusers;
  Chat__UserInfo **connectedusers;
};
#define CHAT__CONNECTED_USERS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__connected_users_response__descriptor) \
    , 0,NULL }


/*
 * CAMBIAR DE ESTADO
 * activo, inactivo, ocupado
 */
struct  _Chat__ChangeStatus
{
  ProtobufCMessage base;
  char *username;
  char *status;
};
#define CHAT__CHANGE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__change_status__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * ENVIO DE MENSAJES (DIRECTOS || PA TODOS)
 * recipient: (username || everyone)
 * sender: username del remitente
 */
struct  _Chat__MessageCommunication
{
  ProtobufCMessage base;
  char *message;
  char *recipient;
  char *sender;
};
#define CHAT__MESSAGE_COMMUNICATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__message_communication__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * option 1: Registro de Usuarios
 * option 2: Usuarios Conectados
 * option 3: Cambio de Estado
 * option 4: Mensajes
 * option 5: Informacion de un usuario en particular
 *(SON LAS MISMAS OPCIONES QUE LO QUE RESPONDERA EL SERVER PARA ESTAR EN EL MISMO FORMATO)
 * PARA LA INFO DE TODOS LOS USUARIOS CONECTADOS MANDAR UN UserRequest con everyone
 * PARA LA INFO DE SOLO 1 USUARIO MANDAR UN UserRequest con el username
 */
struct  _Chat__ClientPetition
{
  ProtobufCMessage base;
  int32_t option;
  Chat__UserRegistration *registration;
  Chat__UserRequest *users;
  Chat__ChangeStatus *change;
  Chat__MessageCommunication *messagecommunication;
};
#define CHAT__CLIENT_PETITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__client_petition__descriptor) \
    , 0, NULL, NULL, NULL, NULL }


/*
 * option 1: Registro de Usuarios
 * option 2: Usuarios Conectados
 * option 3: Cambio de Estado
 * option 4: Mensajes
 * option 5: Informacion de un usuario en particular
 * codigo 200: Exito
 * codigo 500: Fallo
 * EN RESPUESTA A UNA SOLICITUD DEL CLIENTE POR EJEMPLO: REGISTRO DE USUARIOS
 * EL SERVER RETORNA:
 *OPCION,
 *CODIGO
 *MENSAJE DEL SERVIDOR
 * PARA SABER SI EL REQUEST FUE SUCCESS O ALGO MURIO EN EL SERVER 
 */
struct  _Chat__ServerResponse
{
  ProtobufCMessage base;
  int32_t option;
  int32_t code;
  char *servermessage;
  Chat__ConnectedUsersResponse *connectedusers;
  Chat__MessageCommunication *messagecommunication;
  Chat__UserInfo *userinforesponse;
  Chat__ChangeStatus *change;
};
#define CHAT__SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chat__server_response__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, NULL, NULL, NULL, NULL }


/* Chat__UserRegistration methods */
void   chat__user_registration__init
                     (Chat__UserRegistration         *message);
size_t chat__user_registration__get_packed_size
                     (const Chat__UserRegistration   *message);
size_t chat__user_registration__pack
                     (const Chat__UserRegistration   *message,
                      uint8_t             *out);
size_t chat__user_registration__pack_to_buffer
                     (const Chat__UserRegistration   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserRegistration *
       chat__user_registration__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_registration__free_unpacked
                     (Chat__UserRegistration *message,
                      ProtobufCAllocator *allocator);
/* Chat__UserInfo methods */
void   chat__user_info__init
                     (Chat__UserInfo         *message);
size_t chat__user_info__get_packed_size
                     (const Chat__UserInfo   *message);
size_t chat__user_info__pack
                     (const Chat__UserInfo   *message,
                      uint8_t             *out);
size_t chat__user_info__pack_to_buffer
                     (const Chat__UserInfo   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserInfo *
       chat__user_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_info__free_unpacked
                     (Chat__UserInfo *message,
                      ProtobufCAllocator *allocator);
/* Chat__UserRequest methods */
void   chat__user_request__init
                     (Chat__UserRequest         *message);
size_t chat__user_request__get_packed_size
                     (const Chat__UserRequest   *message);
size_t chat__user_request__pack
                     (const Chat__UserRequest   *message,
                      uint8_t             *out);
size_t chat__user_request__pack_to_buffer
                     (const Chat__UserRequest   *message,
                      ProtobufCBuffer     *buffer);
Chat__UserRequest *
       chat__user_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__user_request__free_unpacked
                     (Chat__UserRequest *message,
                      ProtobufCAllocator *allocator);
/* Chat__ConnectedUsersResponse methods */
void   chat__connected_users_response__init
                     (Chat__ConnectedUsersResponse         *message);
size_t chat__connected_users_response__get_packed_size
                     (const Chat__ConnectedUsersResponse   *message);
size_t chat__connected_users_response__pack
                     (const Chat__ConnectedUsersResponse   *message,
                      uint8_t             *out);
size_t chat__connected_users_response__pack_to_buffer
                     (const Chat__ConnectedUsersResponse   *message,
                      ProtobufCBuffer     *buffer);
Chat__ConnectedUsersResponse *
       chat__connected_users_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__connected_users_response__free_unpacked
                     (Chat__ConnectedUsersResponse *message,
                      ProtobufCAllocator *allocator);
/* Chat__ChangeStatus methods */
void   chat__change_status__init
                     (Chat__ChangeStatus         *message);
size_t chat__change_status__get_packed_size
                     (const Chat__ChangeStatus   *message);
size_t chat__change_status__pack
                     (const Chat__ChangeStatus   *message,
                      uint8_t             *out);
size_t chat__change_status__pack_to_buffer
                     (const Chat__ChangeStatus   *message,
                      ProtobufCBuffer     *buffer);
Chat__ChangeStatus *
       chat__change_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__change_status__free_unpacked
                     (Chat__ChangeStatus *message,
                      ProtobufCAllocator *allocator);
/* Chat__MessageCommunication methods */
void   chat__message_communication__init
                     (Chat__MessageCommunication         *message);
size_t chat__message_communication__get_packed_size
                     (const Chat__MessageCommunication   *message);
size_t chat__message_communication__pack
                     (const Chat__MessageCommunication   *message,
                      uint8_t             *out);
size_t chat__message_communication__pack_to_buffer
                     (const Chat__MessageCommunication   *message,
                      ProtobufCBuffer     *buffer);
Chat__MessageCommunication *
       chat__message_communication__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__message_communication__free_unpacked
                     (Chat__MessageCommunication *message,
                      ProtobufCAllocator *allocator);
/* Chat__ClientPetition methods */
void   chat__client_petition__init
                     (Chat__ClientPetition         *message);
size_t chat__client_petition__get_packed_size
                     (const Chat__ClientPetition   *message);
size_t chat__client_petition__pack
                     (const Chat__ClientPetition   *message,
                      uint8_t             *out);
size_t chat__client_petition__pack_to_buffer
                     (const Chat__ClientPetition   *message,
                      ProtobufCBuffer     *buffer);
Chat__ClientPetition *
       chat__client_petition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__client_petition__free_unpacked
                     (Chat__ClientPetition *message,
                      ProtobufCAllocator *allocator);
/* Chat__ServerResponse methods */
void   chat__server_response__init
                     (Chat__ServerResponse         *message);
size_t chat__server_response__get_packed_size
                     (const Chat__ServerResponse   *message);
size_t chat__server_response__pack
                     (const Chat__ServerResponse   *message,
                      uint8_t             *out);
size_t chat__server_response__pack_to_buffer
                     (const Chat__ServerResponse   *message,
                      ProtobufCBuffer     *buffer);
Chat__ServerResponse *
       chat__server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chat__server_response__free_unpacked
                     (Chat__ServerResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Chat__UserRegistration_Closure)
                 (const Chat__UserRegistration *message,
                  void *closure_data);
typedef void (*Chat__UserInfo_Closure)
                 (const Chat__UserInfo *message,
                  void *closure_data);
typedef void (*Chat__UserRequest_Closure)
                 (const Chat__UserRequest *message,
                  void *closure_data);
typedef void (*Chat__ConnectedUsersResponse_Closure)
                 (const Chat__ConnectedUsersResponse *message,
                  void *closure_data);
typedef void (*Chat__ChangeStatus_Closure)
                 (const Chat__ChangeStatus *message,
                  void *closure_data);
typedef void (*Chat__MessageCommunication_Closure)
                 (const Chat__MessageCommunication *message,
                  void *closure_data);
typedef void (*Chat__ClientPetition_Closure)
                 (const Chat__ClientPetition *message,
                  void *closure_data);
typedef void (*Chat__ServerResponse_Closure)
                 (const Chat__ServerResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor chat__user_registration__descriptor;
extern const ProtobufCMessageDescriptor chat__user_info__descriptor;
extern const ProtobufCMessageDescriptor chat__user_request__descriptor;
extern const ProtobufCMessageDescriptor chat__connected_users_response__descriptor;
extern const ProtobufCMessageDescriptor chat__change_status__descriptor;
extern const ProtobufCMessageDescriptor chat__message_communication__descriptor;
extern const ProtobufCMessageDescriptor chat__client_petition__descriptor;
extern const ProtobufCMessageDescriptor chat__server_response__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_chat_2eproto__INCLUDED */
