// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_chat_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ChangeStatus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MessageCommunication;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserRegistration;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_UserRequest;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_chat_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ConnectedUsersResponse;
}  // namespace protobuf_chat_2eproto
namespace chat {
class UserRegistrationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserRegistration>
      _instance;
} _UserRegistration_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserInfo>
      _instance;
} _UserInfo_default_instance_;
class UserRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserRequest>
      _instance;
} _UserRequest_default_instance_;
class ConnectedUsersResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectedUsersResponse>
      _instance;
} _ConnectedUsersResponse_default_instance_;
class ChangeStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChangeStatus>
      _instance;
} _ChangeStatus_default_instance_;
class MessageCommunicationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageCommunication>
      _instance;
} _MessageCommunication_default_instance_;
class ClientPetitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientPetition>
      _instance;
} _ClientPetition_default_instance_;
class ServerResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerResponse>
      _instance;
} _ServerResponse_default_instance_;
}  // namespace chat
namespace protobuf_chat_2eproto {
static void InitDefaultsUserRegistration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_UserRegistration_default_instance_;
    new (ptr) ::chat::UserRegistration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::UserRegistration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserRegistration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserRegistration}, {}};

static void InitDefaultsUserInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_UserInfo_default_instance_;
    new (ptr) ::chat::UserInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::UserInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserInfo}, {}};

static void InitDefaultsUserRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_UserRequest_default_instance_;
    new (ptr) ::chat::UserRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::UserRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UserRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUserRequest}, {}};

static void InitDefaultsConnectedUsersResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ConnectedUsersResponse_default_instance_;
    new (ptr) ::chat::ConnectedUsersResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ConnectedUsersResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ConnectedUsersResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsConnectedUsersResponse}, {
      &protobuf_chat_2eproto::scc_info_UserInfo.base,}};

static void InitDefaultsChangeStatus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ChangeStatus_default_instance_;
    new (ptr) ::chat::ChangeStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ChangeStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ChangeStatus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChangeStatus}, {}};

static void InitDefaultsMessageCommunication() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_MessageCommunication_default_instance_;
    new (ptr) ::chat::MessageCommunication();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::MessageCommunication::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MessageCommunication =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMessageCommunication}, {}};

static void InitDefaultsClientPetition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ClientPetition_default_instance_;
    new (ptr) ::chat::ClientPetition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ClientPetition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ClientPetition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsClientPetition}, {
      &protobuf_chat_2eproto::scc_info_UserRegistration.base,
      &protobuf_chat_2eproto::scc_info_UserRequest.base,
      &protobuf_chat_2eproto::scc_info_ChangeStatus.base,
      &protobuf_chat_2eproto::scc_info_MessageCommunication.base,}};

static void InitDefaultsServerResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chat::_ServerResponse_default_instance_;
    new (ptr) ::chat::ServerResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chat::ServerResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_ServerResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsServerResponse}, {
      &protobuf_chat_2eproto::scc_info_ConnectedUsersResponse.base,
      &protobuf_chat_2eproto::scc_info_MessageCommunication.base,
      &protobuf_chat_2eproto::scc_info_UserInfo.base,
      &protobuf_chat_2eproto::scc_info_ChangeStatus.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserRegistration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UserRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectedUsersResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChangeStatus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MessageCommunication.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientPetition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerResponse.base);
}

::google::protobuf::Metadata file_level_metadata[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserRegistration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserRegistration, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserRegistration, ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserInfo, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserInfo, ip_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::UserRequest, user_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ConnectedUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ConnectedUsersResponse, connectedusers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChangeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChangeStatus, username_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ChangeStatus, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::MessageCommunication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::MessageCommunication, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::MessageCommunication, recipient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::MessageCommunication, sender_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientPetition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientPetition, option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientPetition, registration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientPetition, users_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientPetition, change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ClientPetition, messagecommunication_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, servermessage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, connectedusers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, messagecommunication_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, userinforesponse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chat::ServerResponse, change_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::chat::UserRegistration)},
  { 7, -1, sizeof(::chat::UserInfo)},
  { 15, -1, sizeof(::chat::UserRequest)},
  { 21, -1, sizeof(::chat::ConnectedUsersResponse)},
  { 27, -1, sizeof(::chat::ChangeStatus)},
  { 34, -1, sizeof(::chat::MessageCommunication)},
  { 42, -1, sizeof(::chat::ClientPetition)},
  { 52, -1, sizeof(::chat::ServerResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_UserRegistration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_UserRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ConnectedUsersResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ChangeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_MessageCommunication_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ClientPetition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chat::_ServerResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "chat.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nchat.proto\022\004chat\"0\n\020UserRegistration\022\020"
      "\n\010username\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\"8\n\010UserInfo"
      "\022\020\n\010username\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\022\n\n\002ip"
      "\030\003 \001(\t\"\033\n\013UserRequest\022\014\n\004user\030\001 \001(\t\"@\n\026C"
      "onnectedUsersResponse\022&\n\016connectedUsers\030"
      "\001 \003(\0132\016.chat.UserInfo\"0\n\014ChangeStatus\022\020\n"
      "\010username\030\001 \001(\t\022\016\n\006status\030\002 \001(\t\"J\n\024Messa"
      "geCommunication\022\017\n\007message\030\001 \001(\t\022\021\n\treci"
      "pient\030\002 \001(\t\022\016\n\006sender\030\003 \001(\t\"\316\001\n\016ClientPe"
      "tition\022\016\n\006option\030\001 \001(\005\022,\n\014registration\030\002"
      " \001(\0132\026.chat.UserRegistration\022 \n\005users\030\003 "
      "\001(\0132\021.chat.UserRequest\022\"\n\006change\030\004 \001(\0132\022"
      ".chat.ChangeStatus\0228\n\024messageCommunicati"
      "on\030\005 \001(\0132\032.chat.MessageCommunication\"\203\002\n"
      "\016ServerResponse\022\016\n\006option\030\001 \001(\005\022\014\n\004code\030"
      "\002 \001(\005\022\025\n\rserverMessage\030\003 \001(\t\0224\n\016connecte"
      "dUsers\030\004 \001(\0132\034.chat.ConnectedUsersRespon"
      "se\0228\n\024messageCommunication\030\005 \001(\0132\032.chat."
      "MessageCommunication\022(\n\020userInfoResponse"
      "\030\006 \001(\0132\016.chat.UserInfo\022\"\n\006change\030\007 \001(\0132\022"
      ".chat.ChangeStatusb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 826);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_chat_2eproto
namespace chat {

// ===================================================================

void UserRegistration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRegistration::kUsernameFieldNumber;
const int UserRegistration::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRegistration::UserRegistration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_UserRegistration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.UserRegistration)
}
UserRegistration::UserRegistration(const UserRegistration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.UserRegistration)
}

void UserRegistration::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserRegistration::~UserRegistration() {
  // @@protoc_insertion_point(destructor:chat.UserRegistration)
  SharedDtor();
}

void UserRegistration::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserRegistration::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRegistration& UserRegistration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_UserRegistration.base);
  return *internal_default_instance();
}


void UserRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.UserRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserRegistration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.UserRegistration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserRegistration.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserRegistration.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.UserRegistration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.UserRegistration)
  return false;
#undef DO_
}

void UserRegistration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.UserRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserRegistration.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserRegistration.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.UserRegistration)
}

::google::protobuf::uint8* UserRegistration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.UserRegistration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserRegistration.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserRegistration.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.UserRegistration)
  return target;
}

size_t UserRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.UserRegistration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRegistration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.UserRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRegistration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRegistration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.UserRegistration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.UserRegistration)
    MergeFrom(*source);
  }
}

void UserRegistration::MergeFrom(const UserRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.UserRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void UserRegistration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.UserRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRegistration::CopyFrom(const UserRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.UserRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRegistration::IsInitialized() const {
  return true;
}

void UserRegistration::Swap(UserRegistration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRegistration::InternalSwap(UserRegistration* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserRegistration::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kStatusFieldNumber;
const int UserInfo::kIpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_UserInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.UserInfo)
}

void UserInfo::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:chat.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_UserInfo.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.UserInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserInfo.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserInfo.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), static_cast<int>(this->ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserInfo.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), static_cast<int>(this->ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserInfo.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.UserInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  // string ip = 3;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ip_.Swap(&other->ip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRequest::UserRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_UserRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user().size() > 0) {
    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.UserRequest)
}

void UserRequest::SharedCtor() {
  user_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:chat.UserRequest)
  SharedDtor();
}

void UserRequest::SharedDtor() {
  user_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserRequest::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserRequest& UserRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_UserRequest.base);
  return *internal_default_instance();
}


void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.UserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.UserRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user().data(), static_cast<int>(this->user().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.UserRequest.user"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.UserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.UserRequest)
  return false;
#undef DO_
}

void UserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.UserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserRequest.user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.UserRequest)
}

::google::protobuf::uint8* UserRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.UserRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string user = 1;
  if (this->user().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user().data(), static_cast<int>(this->user().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.UserRequest.user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.UserRequest)
  return target;
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.UserRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string user = 1;
  if (this->user().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.UserRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.UserRequest)
    MergeFrom(*source);
  }
}

void UserRequest::MergeFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user().size() > 0) {

    user_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_);
  }
}

void UserRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::Swap(UserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRequest::InternalSwap(UserRequest* other) {
  using std::swap;
  user_.Swap(&other->user_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserRequest::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ConnectedUsersResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectedUsersResponse::kConnectedUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectedUsersResponse::ConnectedUsersResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_ConnectedUsersResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ConnectedUsersResponse)
}
ConnectedUsersResponse::ConnectedUsersResponse(const ConnectedUsersResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      connectedusers_(from.connectedusers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chat.ConnectedUsersResponse)
}

void ConnectedUsersResponse::SharedCtor() {
}

ConnectedUsersResponse::~ConnectedUsersResponse() {
  // @@protoc_insertion_point(destructor:chat.ConnectedUsersResponse)
  SharedDtor();
}

void ConnectedUsersResponse::SharedDtor() {
}

void ConnectedUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConnectedUsersResponse::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectedUsersResponse& ConnectedUsersResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_ConnectedUsersResponse.base);
  return *internal_default_instance();
}


void ConnectedUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ConnectedUsersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connectedusers_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectedUsersResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ConnectedUsersResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chat.UserInfo connectedUsers = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_connectedusers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ConnectedUsersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ConnectedUsersResponse)
  return false;
#undef DO_
}

void ConnectedUsersResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ConnectedUsersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat.UserInfo connectedUsers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connectedusers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->connectedusers(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ConnectedUsersResponse)
}

::google::protobuf::uint8* ConnectedUsersResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ConnectedUsersResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chat.UserInfo connectedUsers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->connectedusers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->connectedusers(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ConnectedUsersResponse)
  return target;
}

size_t ConnectedUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ConnectedUsersResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .chat.UserInfo connectedUsers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->connectedusers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->connectedusers(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectedUsersResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ConnectedUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectedUsersResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectedUsersResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ConnectedUsersResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ConnectedUsersResponse)
    MergeFrom(*source);
  }
}

void ConnectedUsersResponse::MergeFrom(const ConnectedUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ConnectedUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  connectedusers_.MergeFrom(from.connectedusers_);
}

void ConnectedUsersResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ConnectedUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedUsersResponse::CopyFrom(const ConnectedUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ConnectedUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedUsersResponse::IsInitialized() const {
  return true;
}

void ConnectedUsersResponse::Swap(ConnectedUsersResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectedUsersResponse::InternalSwap(ConnectedUsersResponse* other) {
  using std::swap;
  CastToBase(&connectedusers_)->InternalSwap(CastToBase(&other->connectedusers_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConnectedUsersResponse::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChangeStatus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeStatus::kUsernameFieldNumber;
const int ChangeStatus::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeStatus::ChangeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_ChangeStatus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ChangeStatus)
}
ChangeStatus::ChangeStatus(const ChangeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.status().size() > 0) {
    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.ChangeStatus)
}

void ChangeStatus::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChangeStatus::~ChangeStatus() {
  // @@protoc_insertion_point(destructor:chat.ChangeStatus)
  SharedDtor();
}

void ChangeStatus::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChangeStatus::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeStatus& ChangeStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_ChangeStatus.base);
  return *internal_default_instance();
}


void ChangeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool ChangeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ChangeStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChangeStatus.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), static_cast<int>(this->status().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ChangeStatus.status"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ChangeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ChangeStatus)
  return false;
#undef DO_
}

void ChangeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChangeStatus.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChangeStatus.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ChangeStatus)
}

::google::protobuf::uint8* ChangeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ChangeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChangeStatus.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // string status = 2;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), static_cast<int>(this->status().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ChangeStatus.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ChangeStatus)
  return target;
}

size_t ChangeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ChangeStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // string status = 2;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ChangeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ChangeStatus)
    MergeFrom(*source);
  }
}

void ChangeStatus::MergeFrom(const ChangeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void ChangeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeStatus::CopyFrom(const ChangeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatus::IsInitialized() const {
  return true;
}

void ChangeStatus::Swap(ChangeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeStatus::InternalSwap(ChangeStatus* other) {
  using std::swap;
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  status_.Swap(&other->status_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChangeStatus::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MessageCommunication::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageCommunication::kMessageFieldNumber;
const int MessageCommunication::kRecipientFieldNumber;
const int MessageCommunication::kSenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageCommunication::MessageCommunication()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_MessageCommunication.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.MessageCommunication)
}
MessageCommunication::MessageCommunication(const MessageCommunication& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message().size() > 0) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.recipient().size() > 0) {
    recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
  }
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sender().size() > 0) {
    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
  // @@protoc_insertion_point(copy_constructor:chat.MessageCommunication)
}

void MessageCommunication::SharedCtor() {
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageCommunication::~MessageCommunication() {
  // @@protoc_insertion_point(destructor:chat.MessageCommunication)
  SharedDtor();
}

void MessageCommunication::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MessageCommunication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MessageCommunication::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MessageCommunication& MessageCommunication::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_MessageCommunication.base);
  return *internal_default_instance();
}


void MessageCommunication::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.MessageCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recipient_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MessageCommunication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.MessageCommunication)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageCommunication.message"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string recipient = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recipient()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->recipient().data(), static_cast<int>(this->recipient().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageCommunication.recipient"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sender().data(), static_cast<int>(this->sender().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.MessageCommunication.sender"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.MessageCommunication)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.MessageCommunication)
  return false;
#undef DO_
}

void MessageCommunication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.MessageCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageCommunication.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), static_cast<int>(this->recipient().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageCommunication.recipient");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->recipient(), output);
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageCommunication.sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.MessageCommunication)
}

::google::protobuf::uint8* MessageCommunication::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.MessageCommunication)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1;
  if (this->message().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageCommunication.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->recipient().data(), static_cast<int>(this->recipient().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageCommunication.recipient");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->recipient(), target);
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sender().data(), static_cast<int>(this->sender().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.MessageCommunication.sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.MessageCommunication)
  return target;
}

size_t MessageCommunication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.MessageCommunication)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string message = 1;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  // string recipient = 2;
  if (this->recipient().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recipient());
  }

  // string sender = 3;
  if (this->sender().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sender());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageCommunication::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.MessageCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageCommunication* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageCommunication>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.MessageCommunication)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.MessageCommunication)
    MergeFrom(*source);
  }
}

void MessageCommunication::MergeFrom(const MessageCommunication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.MessageCommunication)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.recipient().size() > 0) {

    recipient_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recipient_);
  }
  if (from.sender().size() > 0) {

    sender_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_);
  }
}

void MessageCommunication::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.MessageCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageCommunication::CopyFrom(const MessageCommunication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.MessageCommunication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCommunication::IsInitialized() const {
  return true;
}

void MessageCommunication::Swap(MessageCommunication* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageCommunication::InternalSwap(MessageCommunication* other) {
  using std::swap;
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recipient_.Swap(&other->recipient_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sender_.Swap(&other->sender_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MessageCommunication::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientPetition::InitAsDefaultInstance() {
  ::chat::_ClientPetition_default_instance_._instance.get_mutable()->registration_ = const_cast< ::chat::UserRegistration*>(
      ::chat::UserRegistration::internal_default_instance());
  ::chat::_ClientPetition_default_instance_._instance.get_mutable()->users_ = const_cast< ::chat::UserRequest*>(
      ::chat::UserRequest::internal_default_instance());
  ::chat::_ClientPetition_default_instance_._instance.get_mutable()->change_ = const_cast< ::chat::ChangeStatus*>(
      ::chat::ChangeStatus::internal_default_instance());
  ::chat::_ClientPetition_default_instance_._instance.get_mutable()->messagecommunication_ = const_cast< ::chat::MessageCommunication*>(
      ::chat::MessageCommunication::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientPetition::kOptionFieldNumber;
const int ClientPetition::kRegistrationFieldNumber;
const int ClientPetition::kUsersFieldNumber;
const int ClientPetition::kChangeFieldNumber;
const int ClientPetition::kMessageCommunicationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientPetition::ClientPetition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_ClientPetition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ClientPetition)
}
ClientPetition::ClientPetition(const ClientPetition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_registration()) {
    registration_ = new ::chat::UserRegistration(*from.registration_);
  } else {
    registration_ = NULL;
  }
  if (from.has_users()) {
    users_ = new ::chat::UserRequest(*from.users_);
  } else {
    users_ = NULL;
  }
  if (from.has_change()) {
    change_ = new ::chat::ChangeStatus(*from.change_);
  } else {
    change_ = NULL;
  }
  if (from.has_messagecommunication()) {
    messagecommunication_ = new ::chat::MessageCommunication(*from.messagecommunication_);
  } else {
    messagecommunication_ = NULL;
  }
  option_ = from.option_;
  // @@protoc_insertion_point(copy_constructor:chat.ClientPetition)
}

void ClientPetition::SharedCtor() {
  ::memset(&registration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_) -
      reinterpret_cast<char*>(&registration_)) + sizeof(option_));
}

ClientPetition::~ClientPetition() {
  // @@protoc_insertion_point(destructor:chat.ClientPetition)
  SharedDtor();
}

void ClientPetition::SharedDtor() {
  if (this != internal_default_instance()) delete registration_;
  if (this != internal_default_instance()) delete users_;
  if (this != internal_default_instance()) delete change_;
  if (this != internal_default_instance()) delete messagecommunication_;
}

void ClientPetition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientPetition::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientPetition& ClientPetition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_ClientPetition.base);
  return *internal_default_instance();
}


void ClientPetition::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ClientPetition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && registration_ != NULL) {
    delete registration_;
  }
  registration_ = NULL;
  if (GetArenaNoVirtual() == NULL && users_ != NULL) {
    delete users_;
  }
  users_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_ != NULL) {
    delete change_;
  }
  change_ = NULL;
  if (GetArenaNoVirtual() == NULL && messagecommunication_ != NULL) {
    delete messagecommunication_;
  }
  messagecommunication_ = NULL;
  option_ = 0;
  _internal_metadata_.Clear();
}

bool ClientPetition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ClientPetition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 option = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.UserRegistration registration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_registration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.UserRequest users = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.ChangeStatus change = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.MessageCommunication messageCommunication = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_messagecommunication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ClientPetition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ClientPetition)
  return false;
#undef DO_
}

void ClientPetition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ClientPetition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 option = 1;
  if (this->option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option(), output);
  }

  // .chat.UserRegistration registration = 2;
  if (this->has_registration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_registration(), output);
  }

  // .chat.UserRequest users = 3;
  if (this->has_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_users(), output);
  }

  // .chat.ChangeStatus change = 4;
  if (this->has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_change(), output);
  }

  // .chat.MessageCommunication messageCommunication = 5;
  if (this->has_messagecommunication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_messagecommunication(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ClientPetition)
}

::google::protobuf::uint8* ClientPetition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ClientPetition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 option = 1;
  if (this->option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option(), target);
  }

  // .chat.UserRegistration registration = 2;
  if (this->has_registration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_registration(), deterministic, target);
  }

  // .chat.UserRequest users = 3;
  if (this->has_users()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_users(), deterministic, target);
  }

  // .chat.ChangeStatus change = 4;
  if (this->has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_change(), deterministic, target);
  }

  // .chat.MessageCommunication messageCommunication = 5;
  if (this->has_messagecommunication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_messagecommunication(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ClientPetition)
  return target;
}

size_t ClientPetition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ClientPetition)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .chat.UserRegistration registration = 2;
  if (this->has_registration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *registration_);
  }

  // .chat.UserRequest users = 3;
  if (this->has_users()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *users_);
  }

  // .chat.ChangeStatus change = 4;
  if (this->has_change()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_);
  }

  // .chat.MessageCommunication messageCommunication = 5;
  if (this->has_messagecommunication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *messagecommunication_);
  }

  // int32 option = 1;
  if (this->option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->option());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientPetition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ClientPetition)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientPetition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientPetition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ClientPetition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ClientPetition)
    MergeFrom(*source);
  }
}

void ClientPetition::MergeFrom(const ClientPetition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ClientPetition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_registration()) {
    mutable_registration()->::chat::UserRegistration::MergeFrom(from.registration());
  }
  if (from.has_users()) {
    mutable_users()->::chat::UserRequest::MergeFrom(from.users());
  }
  if (from.has_change()) {
    mutable_change()->::chat::ChangeStatus::MergeFrom(from.change());
  }
  if (from.has_messagecommunication()) {
    mutable_messagecommunication()->::chat::MessageCommunication::MergeFrom(from.messagecommunication());
  }
  if (from.option() != 0) {
    set_option(from.option());
  }
}

void ClientPetition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ClientPetition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientPetition::CopyFrom(const ClientPetition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ClientPetition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPetition::IsInitialized() const {
  return true;
}

void ClientPetition::Swap(ClientPetition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientPetition::InternalSwap(ClientPetition* other) {
  using std::swap;
  swap(registration_, other->registration_);
  swap(users_, other->users_);
  swap(change_, other->change_);
  swap(messagecommunication_, other->messagecommunication_);
  swap(option_, other->option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientPetition::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerResponse::InitAsDefaultInstance() {
  ::chat::_ServerResponse_default_instance_._instance.get_mutable()->connectedusers_ = const_cast< ::chat::ConnectedUsersResponse*>(
      ::chat::ConnectedUsersResponse::internal_default_instance());
  ::chat::_ServerResponse_default_instance_._instance.get_mutable()->messagecommunication_ = const_cast< ::chat::MessageCommunication*>(
      ::chat::MessageCommunication::internal_default_instance());
  ::chat::_ServerResponse_default_instance_._instance.get_mutable()->userinforesponse_ = const_cast< ::chat::UserInfo*>(
      ::chat::UserInfo::internal_default_instance());
  ::chat::_ServerResponse_default_instance_._instance.get_mutable()->change_ = const_cast< ::chat::ChangeStatus*>(
      ::chat::ChangeStatus::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerResponse::kOptionFieldNumber;
const int ServerResponse::kCodeFieldNumber;
const int ServerResponse::kServerMessageFieldNumber;
const int ServerResponse::kConnectedUsersFieldNumber;
const int ServerResponse::kMessageCommunicationFieldNumber;
const int ServerResponse::kUserInfoResponseFieldNumber;
const int ServerResponse::kChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerResponse::ServerResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_chat_2eproto::scc_info_ServerResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chat.ServerResponse)
}
ServerResponse::ServerResponse(const ServerResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  servermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.servermessage().size() > 0) {
    servermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servermessage_);
  }
  if (from.has_connectedusers()) {
    connectedusers_ = new ::chat::ConnectedUsersResponse(*from.connectedusers_);
  } else {
    connectedusers_ = NULL;
  }
  if (from.has_messagecommunication()) {
    messagecommunication_ = new ::chat::MessageCommunication(*from.messagecommunication_);
  } else {
    messagecommunication_ = NULL;
  }
  if (from.has_userinforesponse()) {
    userinforesponse_ = new ::chat::UserInfo(*from.userinforesponse_);
  } else {
    userinforesponse_ = NULL;
  }
  if (from.has_change()) {
    change_ = new ::chat::ChangeStatus(*from.change_);
  } else {
    change_ = NULL;
  }
  ::memcpy(&option_, &from.option_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&option_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:chat.ServerResponse)
}

void ServerResponse::SharedCtor() {
  servermessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connectedusers_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&connectedusers_)) + sizeof(code_));
}

ServerResponse::~ServerResponse() {
  // @@protoc_insertion_point(destructor:chat.ServerResponse)
  SharedDtor();
}

void ServerResponse::SharedDtor() {
  servermessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete connectedusers_;
  if (this != internal_default_instance()) delete messagecommunication_;
  if (this != internal_default_instance()) delete userinforesponse_;
  if (this != internal_default_instance()) delete change_;
}

void ServerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerResponse::descriptor() {
  ::protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerResponse& ServerResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_chat_2eproto::scc_info_ServerResponse.base);
  return *internal_default_instance();
}


void ServerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chat.ServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servermessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && connectedusers_ != NULL) {
    delete connectedusers_;
  }
  connectedusers_ = NULL;
  if (GetArenaNoVirtual() == NULL && messagecommunication_ != NULL) {
    delete messagecommunication_;
  }
  messagecommunication_ = NULL;
  if (GetArenaNoVirtual() == NULL && userinforesponse_ != NULL) {
    delete userinforesponse_;
  }
  userinforesponse_ = NULL;
  if (GetArenaNoVirtual() == NULL && change_ != NULL) {
    delete change_;
  }
  change_ = NULL;
  ::memset(&option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&option_)) + sizeof(code_));
  _internal_metadata_.Clear();
}

bool ServerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chat.ServerResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 option = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string serverMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servermessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->servermessage().data(), static_cast<int>(this->servermessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "chat.ServerResponse.serverMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.ConnectedUsersResponse connectedUsers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_connectedusers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.MessageCommunication messageCommunication = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_messagecommunication()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.UserInfo userInfoResponse = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_userinforesponse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .chat.ChangeStatus change = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chat.ServerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chat.ServerResponse)
  return false;
#undef DO_
}

void ServerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chat.ServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 option = 1;
  if (this->option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option(), output);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // string serverMessage = 3;
  if (this->servermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servermessage().data(), static_cast<int>(this->servermessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerResponse.serverMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->servermessage(), output);
  }

  // .chat.ConnectedUsersResponse connectedUsers = 4;
  if (this->has_connectedusers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_connectedusers(), output);
  }

  // .chat.MessageCommunication messageCommunication = 5;
  if (this->has_messagecommunication()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_messagecommunication(), output);
  }

  // .chat.UserInfo userInfoResponse = 6;
  if (this->has_userinforesponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_userinforesponse(), output);
  }

  // .chat.ChangeStatus change = 7;
  if (this->has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_change(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:chat.ServerResponse)
}

::google::protobuf::uint8* ServerResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chat.ServerResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 option = 1;
  if (this->option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // string serverMessage = 3;
  if (this->servermessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->servermessage().data(), static_cast<int>(this->servermessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "chat.ServerResponse.serverMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servermessage(), target);
  }

  // .chat.ConnectedUsersResponse connectedUsers = 4;
  if (this->has_connectedusers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_connectedusers(), deterministic, target);
  }

  // .chat.MessageCommunication messageCommunication = 5;
  if (this->has_messagecommunication()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_messagecommunication(), deterministic, target);
  }

  // .chat.UserInfo userInfoResponse = 6;
  if (this->has_userinforesponse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_userinforesponse(), deterministic, target);
  }

  // .chat.ChangeStatus change = 7;
  if (this->has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_change(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chat.ServerResponse)
  return target;
}

size_t ServerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chat.ServerResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string serverMessage = 3;
  if (this->servermessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servermessage());
  }

  // .chat.ConnectedUsersResponse connectedUsers = 4;
  if (this->has_connectedusers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *connectedusers_);
  }

  // .chat.MessageCommunication messageCommunication = 5;
  if (this->has_messagecommunication()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *messagecommunication_);
  }

  // .chat.UserInfo userInfoResponse = 6;
  if (this->has_userinforesponse()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *userinforesponse_);
  }

  // .chat.ChangeStatus change = 7;
  if (this->has_change()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *change_);
  }

  // int32 option = 1;
  if (this->option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->option());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chat.ServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chat.ServerResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chat.ServerResponse)
    MergeFrom(*source);
  }
}

void ServerResponse::MergeFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chat.ServerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.servermessage().size() > 0) {

    servermessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servermessage_);
  }
  if (from.has_connectedusers()) {
    mutable_connectedusers()->::chat::ConnectedUsersResponse::MergeFrom(from.connectedusers());
  }
  if (from.has_messagecommunication()) {
    mutable_messagecommunication()->::chat::MessageCommunication::MergeFrom(from.messagecommunication());
  }
  if (from.has_userinforesponse()) {
    mutable_userinforesponse()->::chat::UserInfo::MergeFrom(from.userinforesponse());
  }
  if (from.has_change()) {
    mutable_change()->::chat::ChangeStatus::MergeFrom(from.change());
  }
  if (from.option() != 0) {
    set_option(from.option());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void ServerResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chat.ServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerResponse::CopyFrom(const ServerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chat.ServerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerResponse::IsInitialized() const {
  return true;
}

void ServerResponse::Swap(ServerResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerResponse::InternalSwap(ServerResponse* other) {
  using std::swap;
  servermessage_.Swap(&other->servermessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(connectedusers_, other->connectedusers_);
  swap(messagecommunication_, other->messagecommunication_);
  swap(userinforesponse_, other->userinforesponse_);
  swap(change_, other->change_);
  swap(option_, other->option_);
  swap(code_, other->code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerResponse::GetMetadata() const {
  protobuf_chat_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_chat_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chat
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::UserRegistration* Arena::CreateMaybeMessage< ::chat::UserRegistration >(Arena* arena) {
  return Arena::CreateInternal< ::chat::UserRegistration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::UserInfo* Arena::CreateMaybeMessage< ::chat::UserInfo >(Arena* arena) {
  return Arena::CreateInternal< ::chat::UserInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::UserRequest* Arena::CreateMaybeMessage< ::chat::UserRequest >(Arena* arena) {
  return Arena::CreateInternal< ::chat::UserRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ConnectedUsersResponse* Arena::CreateMaybeMessage< ::chat::ConnectedUsersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ConnectedUsersResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ChangeStatus* Arena::CreateMaybeMessage< ::chat::ChangeStatus >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ChangeStatus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::MessageCommunication* Arena::CreateMaybeMessage< ::chat::MessageCommunication >(Arena* arena) {
  return Arena::CreateInternal< ::chat::MessageCommunication >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ClientPetition* Arena::CreateMaybeMessage< ::chat::ClientPetition >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ClientPetition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chat::ServerResponse* Arena::CreateMaybeMessage< ::chat::ServerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::chat::ServerResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
